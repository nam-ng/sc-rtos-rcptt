--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: Internal_Project
Element-Type: context
Element-Version: 2.0
Id: _qIWKgJP3EemibuIcIDpJqA
Runtime-Version: 2.5.2.202109092356
Save-Time: 9/22/22, 4:04 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc build_project_without_checking_console [val name] {
	with [get-view "Project Explorer" | get-tree] {
		with [get-item -path [concat $name ".*"]] {
			click
			get-eclipse-window | key-type "M1+B"
		}
	}
}

proc build_project_with_fail_result [val name] {
	build_project_without_checking_console $name

	loop {
		try {
			check_console_not_contains_message "Build Failed"
			wait 1000
			recur
		} -catch {
		}
	}
}

proc build_project [val name] {
	build_project_without_checking_console $name

	loop {
		try {
			check_console_not_contains_message "Build Finished"
			wait 1000
			recur
		} -catch {
		}
	}
}

proc reload_project [val projectName] {
	close_project $projectName
	open_project $projectName
}

proc close_project [val projectName] {
	get-eclipse-window | key-type "M1+M2+s"
	try {
		get-editor [concat $projectName $SCFG_EXTENSION] | close
	} -catch {
	}
}

proc close_all_projects [val projectName] {
	get-eclipse-window | key-type "M1+M2+s"

	loop {
		try {
			get-editor [concat ".*" $SCFG_EXTENSION] | close
			recur
		} -catch {
		}
	}
}

proc save_all_projects {
	get-eclipse-window | key-type "M1+M2+s"
}

proc import_project [val projectName] [val location] [val type] {
	delete_project $projectName
	get-menu -path "File/Import..." | click
	with [get-window Import] {
		get-editbox -after [get-label "Select an import wizard:"] | set-text "rename & import"
		get-button "Next >" | click
	}

	with [get-window Import] {
		get-editbox -after [get-label "Project name:"] | set-text $projectName
		with [get-group "Import from:"] {
			if [$type | eq false] {
				get-button "Select root directory:" | click
				set-dialog-result Folder $location
				get-button "Browse..." -index 0 | click
			} -else {
				get-button "Select archive file:" | click
				set-dialog-result File $location
				get-button "Browse..." -index 1 | click
			}
		}
		get-tree | select [concat [$location | split -sep "\\" -trimResults | to-list | get [$location | invoke
			"lastIndexOf" "\\"] ".*"]]
		get-button Finish | click
	}
}

proc open_SC_editor [val projectName] {
	with [get-view "Project Explorer" | get-tree] {
		select [concat $projectName ".*"] | double-click
		select [concat $projectName ".*/" $projectName $SCFG_EXTENSION] | double-click
	}
}

proc close_confirm_dialog {
	try {
		get-window "Code Generator Registration" | get-button OK | click
	} -catch {
	}
	try {
		get-window Confirm | get-button OK | click
	} -catch {
	}
	try {
		get-window Confirm | get-button OK | click
	} -catch {
	}
}

proc close_dialog {
	close_confirm_dialog
	close_confirm_dialog
	close_confirm_dialog
}

proc close_install_dialog {
	try {
		get-window Install | get-button OK | click
	} -catch {
		close_confirm_dialog
	}
	try {
		get-window Install | get-button OK | click
	} -catch {
		close_confirm_dialog
	}
}

proc close_gitHub_denite_dialog {
	try {
		get-window "Problem Occurred" | get-button OK | click
	} -catch {
		close_confirm_dialog
	}
	try {
		get-window "Problem Occurred" | get-button OK | click
	} -catch {
		close_confirm_dialog
	}
}

proc createAFRProject [val ProjectName] [val toolchainVersion] [val RTOSType] [val Device] [val RTOSVersion] [val Application] {
	delete_project $ProjectName
	try {
		delete_project $ProjectName
	} -catch {
	}
	get-menu -path "File/New/C\\/C++ Project" | click
	with [get-window "New C/C++ Project"] {
		get-list | select "Renesas RX"
		get-table | select [get-item -path "" -index 2]
		get-button "Next >" | click
		with [get-window -class WizardDialog] {
			get-editbox -after [get-label "Project name:"] | set-text $ProjectName
			get-button "Next >" | click
			get-group "Toolchain Settings" | get-combo -after [get-label "Toolchain Version:"] | select $toolchainVersion
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS:"] | select $RTOSType
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS Version:"] | select $RTOSVersion
		}

		with [get-window -class WizardDialog] {
			get-group "Device Settings" | get-combo -after [get-label "Target Board:"] | select $Device
		}
		with [get-button "Next >"] {
			click
		}
		if [$Application | eq ""] {
		try {
				with [get-window -class WizardDialog] {
				get-button Finish | click
				}
			} -catch{}
		} -else {
			with [get-button "Next >"] {
				click
			}
			get-window -class WizardDialog | get-group "Select application:" | get-label $Application | click
			with [get-window -class WizardDialog] {
				get-button Finish | click
			}
		}
	}
}

proc createAFRGCCProject [val ProjectName] [val toolchainVersion] [val RTOSType] [val Device] [val RTOSVersion] [val Application] {
	try {
		delete_project $ProjectName
	} -catch {
	}
	get-menu -path "File/New/C\\/C++ Project" | click
	with [get-window "New C/C++ Project"] {
		get-list | select "Renesas RX"
		get-table | select [get-item -path "" -index 0]
		get-button "Next >" | click
		with [get-window -class WizardDialog] {
			get-editbox -after [get-label "Project name:"] | set-text $ProjectName
			get-button "Next >" | click
			get-group "Toolchain Settings" | get-combo -after [get-label "Toolchain Version:"] | select $toolchainVersion
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS:"] | select $RTOSType
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS Version:"] | select $RTOSVersion
		}

		with [get-window -class WizardDialog] {
			get-group "Device Settings" | get-combo -after [get-label "Target Board:"] | select $Device
		}
		with [get-button "Next >"] {
			click
		}
		if [$Application | eq ""] {
		try {
				with [get-window -class WizardDialog] {
				get-button Finish | click
				}
			} -catch{}
		} -else {
			with [get-button "Next >"] {
				click
			}
			get-window -class WizardDialog | get-group "Select application:" | get-label $Application | click
			with [get-window -class WizardDialog] {
				get-button Finish | click
			}
		}
	}
}

proc createAFRGCCProjectQualification [val ProjectName] [val toolchainVersion] [val RTOSType] [val Device] [val RTOSVersion] [val Application] [val Location]{
	try {
		delete_project $ProjectName
	} -catch {
	}
	get-menu -path "File/New/C\\/C++ Project" | click
	with [get-window "New C/C++ Project"] {
		get-list | select "Renesas RX"
		get-table | select [get-item -path "" -index 0]
		get-button "Next >" | click
		with [get-window -class WizardDialog] {
			get-editbox -after [get-label "Project name:"] | set-text $ProjectName
			get-button "Use default location" | uncheck
			set-dialog-result Folder $Location
			get-button "Browse..." | click
			get-button "Next >" | click
			get-group "Toolchain Settings" | get-combo -after [get-label "Toolchain Version:"] | select $toolchainVersion
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS:"] | select $RTOSType
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS Version:"] | select $RTOSVersion
		}

		with [get-window -class WizardDialog] {
			get-group "Device Settings" | get-combo -after [get-label "Target Board:"] | select $Device
		}
		with [get-button "Next >"] {
			click
		}
		if [$Application | eq ""] {
		try {
				with [get-window -class WizardDialog] {
				get-button Finish | click
				}
			} -catch{}
		} -else {
			with [get-button "Next >"] {
				click
			}
			get-window -class WizardDialog | get-group "Select application:" | get-label $Application | click
			with [get-window -class WizardDialog] {
				get-button Finish | click
			}
		}
	}
}

proc downloadAFRModule [val project] [val Version] {
	try {
		delete_project $project
	} -catch {
	}
	try {
		get-menu -path "File/New/C\\/C++ Project" | click
	} -catch {
		close_confirm_dialog
		close_install_dialog

		get-menu -path "File/New/C\\/C++ Project" | click
	}
	try {
		with [get-window "New C/C++ Project"] {
			get-list | select "Renesas RX"
			get-table | select [get-item -path "" -index 2]
			get-button "Next >" | click
		}
	} -catch {
		close_confirm_dialog
		close_install_dialog

		with [get-window "New C/C++ Project"] {
			get-list | select "Renesas RX"
			get-table | select [get-item -path "" -index 2]
			get-button "Next >" | click
		}
	}
	with [get-window -class WizardDialog] {
		get-editbox -after [get-label "Project name:"] | set-text $project
		get-button "Next >" | click
		get-group "Toolchain Settings" | get-combo -after [get-label "RTOS:"] | select "FreeRTOS (with IoT libraries)"
		get-link "<a>Manage RTOS Versions...</a>" | click-link
	}
	try {
		with [get-window -class FreeRtosDownloadDialog] {
			with [get-table] {
				get-item -path "Amazon FreeRTOS" -column Title -index 9 | check
			}
			get-button Download | click
			get-window "End User License Agreement(Sample Code)" | get-button Agree | click
		}
	} -catch {
	}
	with [get-window -class WizardDialog] {
		try {
			get-group "RTOS version setting" | get-combo -after [get-label "Version:"] | select $Version
		} -catch {
			recur
		}
		try {
			get-button Finish | click
		} -catch {
			recur
		}
	}
}

proc delete_project [val name] {
	try {
		get-eclipse-window | key-type "M1+M2+s"
		get-view "Project Explorer" | get-button "Collapse All.*" | click

		with [get-view "Project Explorer" | get-tree] {
			with [get-item -path [concat $name ".*"]] {
				click
				try {
					get-menu -path "Close Project" | click
				} -catch {
				}
			}
			key-type Del
		}

		with [get-window "Delete Resources"] {
			get-button "Delete project contents on disk (cannot be undone)" | check
			get-button OK | click
		}
	} -catch {
	}
}

proc ImportAFRProject [val PROJECTNAME] [val AFR_Project_Root] [val RTOSVersion] [val override] {
	try {
		delete_AFR_project $PROJECTNAME
	} -catch {
	}
	get-menu -path "File/Import..." | click
	with [get-window Import] {
		get-tree | select "General/Renesas GitHub Amazon FreeRTOS Project"
		get-button "Next >" | click
	}
	with [get-window -class WizardDialog] {
		try {
			get-group "RTOS version setting" | get-combo -after [get-label "Version:"] | select $RTOSVersion
			get-button "Next >" | click
		} -catch {
		}

		try {
			if [$override | eq false] {
				get-window "Confirm Folder Replace" | get-button No | click
			} -else {
				get-window "Confirm Folder Replace" | get-button Yes | click
				loop {
					try {
						get-window "Progress Information" | wait 1000
						recur
					} -catch {
					}
				}
			}
		} -catch {
		}
		try {
			get-button "Deselect All" | click
			with [get-tree] {
				get-item -path [concat $PROJECTNAME " " "(" [get-workspace-location] $AFR_Project_Root ")"] | check
			}
		} -catch {
		}
		get-button Finish | click
	}
}

proc open_project [val projectName] {
	loop {
		with [get-view "Project Explorer" | get-tree | get-item -path [concat $projectName ".*"]] {
			try {
				double-click
				try {
					get-window "Code Generator Registration" | get-button OK | click
				} -catch {
				}
				try {
					get-window Confirm | get-button OK | click
				} -catch {
				}
				try {
					get-window Confirm | get-button OK | click
				} -catch {
				}
				get-item [concat ".*" $SCFG_EXTENSION] | double-click
			} -catch {
				recur
			}
		}
	}
}

proc addandremove [val ProjectName] {
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-tab-folder | get-tab-item Tasks
		| click
	// Hit add button
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table | get-label | click
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table | get-label -index 1 | click
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table | get-label -index 2 | click
	// Hit remove button
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table | get-label -index 1 | click
	get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table | get-label -index 2 | click

	with [get-editor [concat $ProjectName $SCFG_EXTENSION] | get-section Configure | get-table] {
		get-combo -index 2 | get-property selection | equals "kernel start" | verify-true
		get-editbox -index 12 | get-property text | equals task_4 | verify-true
		get-editbox -index 13 | get-property text | equals task_4 | verify-true
		get-editbox -index 14 | get-property text | equals 512 | verify-true
		get-editbox -index 15 | get-property text | equals NULL | verify-true
		get-editbox -index 16 | get-property text | equals NULL | verify-true
		get-editbox -index 17 | get-property text | equals 1 | verify-true
	}
}

proc createAFRRZProject [val ProjectName] [val toolchain] [val RTOSType] [val Device] [val RTOSVersion] {
	try {
		delete_project $ProjectName
	} -catch {
	}
	try {
		get-menu -path "File/New/C\\/C++ Project" | click
	} -catch {
		close_confirm_dialog
		close_install_dialog

		get-menu -path "File/New/C\\/C++ Project" | click
	}
	try {
		with [get-window "New C/C++ Project"] {
			get-list | select "Renesas RZ"
			get-table | select [get-item -path "" -index 0]
			get-button "Next >" | click
		}
	} -catch {
		close_confirm_dialog
		close_install_dialog

		with [get-window "New C/C++ Project"] {
			get-list | select "Renesas RZ"
			get-table | select [get-item -path "" -index 0]
			get-button "Next >" | click
		}
	}
	with [get-window -class WizardDialog] {
		get-editbox -after [get-label "Project name:"] | set-text $ProjectName
		get-button "Next >" | click
		get-group "Toolchain Settings" | get-combo -after [get-label "Toolchain Version:"] | select $toolchain
		get-group "Toolchain Settings" | get-combo -after [get-label "RTOS:"] | select $RTOSType
		try {
			get-group "Toolchain Settings" | get-combo -after [get-label "RTOS Version:"] | select $RTOSVersion
		} -catch {
		}
	}
	get-window -class WizardDialog | get-group "Device Settings" | get-button "..." | click
	with [get-window -class WizardDialog] {
		get-group "Device Settings" | get-button "..."
		with [get-window -class DeviceSelectionDialog] {
			get-tree | select $Device
			get-button OK | click
		}
		wait 3000
	}
	with [get-window -class WizardDialog] {
		try {
			get-group "RTOS version setting" | get-combo -after [get-label "RTOS Version:"] | select $RTOSVersion
		} -catch {
			recur
		}
		try {
			get-button "Next >" | click
			get-button Finish | click
		} -catch {
			recur
		}
	}
}
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
